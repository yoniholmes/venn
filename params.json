{"name":"venn","tagline":"Fluent API for set operations.","body":"One of these days I was looking for a library that would allow me to do simple set operations, mostly intersection and unions. There's so many that do it, like underscore, the problem I found was that none of them had a fluent API, so I took a take on doing my own.\r\n\r\nCompatible with AMD and node.\r\n\r\n### Simple\r\n\r\nA venn set is just an array with some added features:\r\n\r\n```javascript\r\n\r\n  var venn = require(\"venn\")\r\n  venn.create([1,2]) // returns [1,2]\r\n```\r\n\r\nYou can now chain operations to this set, like an union:\r\n\r\n```javascript\r\n  venn.create([1,2])\r\n      .union([1,2,3,4]) // returns [1,2,3,4]  \r\n```\r\n\r\nOr an intersection:\r\n\r\n```javascript\r\n    venn.create([1,2])\r\n      .union([1,2,3,4]) \r\n      .intersection([1,5]) // returns [1]\r\n```\r\n\r\nOr a mix of everything\r\n\r\n```javascript\r\n    venn.create([1,2])\r\n      .union([1,2,3,4]) \r\n      .intersection([1,5])\r\n      .union([2]) // returns [1,5,2]      \r\n```\r\n\r\n### Still simple:\r\n\r\nYou can also use objects, without a custom hash/key function\r\n\r\n```javascript\r\n    venn.create([\r\n        {name: \"vitor\", age: \"23\"}\r\n      , {name: \"khov\",  age: \"24\"}\r\n      , {name: \"pat\",   age: \"30\"}])\r\n      .intersection([\r\n        {name: \"vitor\",  age: \"23\"}\r\n      , {name: \"newguy\", age: \"0\"}\r\n      , {name: \"pat\",    age: \"50\"}])\r\n      .union([\r\n        {name: \"khov\", age : \"10\"}\r\n      , {name: \"nuno\", age : \"20\"}]) \r\n\r\n    // returns vitor, khov and nuno\r\n```\r\n\r\nBut if you want performance, write your own key function\r\n\r\n```javascript\r\n  \r\n    var myKeyFunction = function(item) {\r\n      return item.name\r\n    }\r\n    \r\n    venn.create([\r\n        {name: \"vitor\", age: \"100\"}\r\n      , {name: \"khov\",  age: \"100\"}], myKeyFunction)\r\n      .intersection([\r\n        {name: \"vitor\",  age: \"0\"}\r\n      , {name: \"khov\",   age: \"0\"}\r\n      .union([\r\n        {name: \"khov\", age : \"-100\"}\r\n      , {name: \"nuno\", age : \"20\"}]) \r\n   \r\n    // returns vitor, khov(the first of them) and nuno\r\n```\r\n\r\n### Some notes\r\n\r\n* The keyFunction only needs to be set once for each venn object (as you would expect)\r\n* Don't forget if you apply a built-in array function like `filter` or `map` the returning object is not a venn object (as you would once again expect)\r\n\r\nLet me know if there are improvements I can do to the library. I might take some time to implement the other less used set operations.\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}